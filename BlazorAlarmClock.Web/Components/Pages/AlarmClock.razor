@page "/alarmclock"
@rendermode InteractiveServer
@implements IDisposable
@inject ILocalStorageService _localstorage;
@inject Models.AlarmClock clock;

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<PageTitle>Clock</PageTitle>

@if (clock.ActiveAlarm == true)
{
    <h1 class="text-danger">@clock.Time.ToLongTimeString()</h1>
}
else
{
    <h1 class="text-primary">@clock.Time.ToLongTimeString()</h1>
}
<h2>Set Alarm</h2>
<form @onsubmit="SetAlarm">
    <label>
        Alarm Hour:
        <InputNumber @bind-Value="alarmHour" />
    </label>
    <label>
        Alarm Minute:
        <InputNumber @bind-Value="alarmMinute"/>
    </label>
    <label>
        Alarm Second:
        <InputNumber @bind-Value="alarmSecond"/>
    </label>
    <button class="btn btn-primary" type="submit">Set Alarm</button>
</form>

<h2>Alarms:</h2>
<ul>
    @foreach (var alarm in clock.Alarms)
    {
        @if (alarm.IsActive == true)
        {
            <li class="text-danger">@alarm.Time.ToLongTimeString()</li>
        } 
        else if (alarm.Enabled == true)
        {
            <li class="text-primary">@alarm.Time.ToLongTimeString()</li>
        }
        else
        {
            <li class="text-warning">@alarm.Time.ToLongTimeString()
                <button class="btn-warning" @onclick="() => alarm.ReEnable()">Re Enable</button>
            </li>
        }
        
    }
</ul>

<button class="btn btn-secondary" @onclick="() => clock.AcknowledgeAlarm()">AckowledgeAlarm</button>


@code {
    private Timer timer;

    private int alarmHour;
    private int alarmMinute;
    private int alarmSecond;

    private bool playing;
    private string track = "Data/alarmSound.mp3";
    private bool currentTrackLoaded = false;
    private double trackDuration;
    private AudioContext context = default!;
    private AudioDestinationNode destination = default!;
    private AudioBufferSourceNode currentAudioBufferNode = default!;
    private AudioBuffer currentAudioBuffer = default!;


    public void SetAlarm()
    {
        clock.AddAlarm(alarmHour, alarmMinute, alarmSecond);
        _localstorage.SetItemAsync("alarms", clock.Alarms);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        timer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }, null, 0, 100);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localAlarms = await _localstorage.GetItemAsync<List<Alarm>>("alarms");
            if (localAlarms != null)
            {
                clock.Alarms = localAlarms;
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }


    public async Task EnsureInitialized()
    {
        if (context is { }) return;

        context = await AudioContext.CreateAsync(JSRuntime);
        destination = await context.GetDestinationAsync();
    }

    public async Task EnsureCurrentTrackLoaded()
    {
        if (currentTrackLoaded) return;
            
        byte[] trackData = await HttpClient.GetByteArrayAsync(track);
        await context.DecodeAudioDataAsync(trackData, (audioBuffer) => { currentAudioBuffer = audioBuffer; return Task.CompletedTask; });
        trackDuration = await currentAudioBuffer.GetDurationAsync();

        currentTrackLoaded = true;
    }
}
